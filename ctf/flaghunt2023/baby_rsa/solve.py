from decimal import Decimal, getcontext
import math

# Set the precision to a sufficiently large value
getcontext().prec = 200

n1 = Decimal('115511598810808994122024459795381579432751132392069312326797280658177070183070520208497145368454904586561346235353033664171878557683129995458055761011836898338089634775745552096426217582906578756082099346204179943077536188707090978859976921126375222699628529040094844198971549729709421970935859728215539554063')
n2 = Decimal('137785542680402152000668581053133699964967120281664825127524777688565277100220253508870159384907453782416835294057139468704091716928212195347515973885966186197928276363881208109522222214269768515034671413337562991389217610189473945409247644895119167997659272198596641796809678354864919404190787506401541463413')
n3 = Decimal('109646562749860806963182844017659687242594568494972488259697876353040187785673405977315639472186808419254350872394680659747834549666681732824447409463830391779254045337701993228434022081729880153032342817970474739902562666698295873924493604822177203255402801080471165105104204292516050857424885722915936357819')

def find_abc(n1, n2, n3):
    # Calculate a
    a = (n1 * n3 / n2).sqrt()
    
    # Calculate b and c using the values of a
    b = n1 / a
    c = n3 / a
    
    # Round up a and b
    a = Decimal(math.ceil(a))
    b = Decimal(math.ceil(b))
    c = Decimal(math.ceil(c))
    
    return a, b, c

a, b, c = find_abc(n1, n2, n3)

print("a =", a)
print("b =", b)
print("c =", c)

# n1 = a*b
# n2 = b*c
# n3 = c*a

n1 = 115511598810808994122024459795381579432751132392069312326797280658177070183070520208497145368454904586561346235353033664171878557683129995458055761011836898338089634775745552096426217582906578756082099346204179943077536188707090978859976921126375222699628529040094844198971549729709421970935859728215539554063
n2 = 137785542680402152000668581053133699964967120281664825127524777688565277100220253508870159384907453782416835294057139468704091716928212195347515973885966186197928276363881208109522222214269768515034671413337562991389217610189473945409247644895119167997659272198596641796809678354864919404190787506401541463413
n3 = 109646562749860806963182844017659687242594568494972488259697876353040187785673405977315639472186808419254350872394680659747834549666681732824447409463830391779254045337701993228434022081729880153032342817970474739902562666698295873924493604822177203255402801080471165105104204292516050857424885722915936357819

a = 9587568566212807729996071563173511111774308425557022286992300383711822023894412475819216438637734128849431145962299782758065311243648137910038414792653887
b = 12048059736217074359195048019572678985298323492526394603624672718789017505016640661337406285953558084206253217378482812553146356120862233746830593072492849
c = 11436326321176170070821584695436540487316231326226153325978058865142776320994890792383549993473487631493560266720195282927985542584322167576726921690972037

c1 = 3525882571620506011987790479364462501137794014298431613259484650388212205397393977058860004603864269609190725322401786963636613761305984350408385598291975860084961232055016100421557466939324818761623425202829518013374242631303348175642183283272340836587262997239302692424441773662319241362854900290449239368
c2 = 112357893113698839853243205939284976454737448756732263347075964979808303955404325102463676929943633875746053154185291768065103345659885927392005698685255634470414121887828212528454220246366211006235245011354019610482428621295494931477176439754446067534966309336111332266095217022603959064393760594918551816251
c3 = 101861869229781364830771836785927717254466817541884138900624162933650217791106337679073658698514171673318769086138667575621809530408520493103210236201010209358967849458436648565738183860324532752167853104511639606862463614737648481040882242349957941520155036551395071015514418110519804475275032536166789310518

e = 65537